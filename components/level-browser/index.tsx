"use client";

import { FC, useEffect, useRef } from "react";
import { useApplicationStore } from "@/store/use-application-store";
import { useDataStore } from "@/store/use-data-store";
import { ReactUnityEventParameter } from "react-unity-webgl/distribution/types/react-unity-event-parameters";

import Dialog from "../ui/dialog";
import { Button } from "../ui/button";
import { ScrollArea } from "../ui/scroll-area";
import { ChevronLeft } from "lucide-react";

import LevelCard from "./level-card";
import { client } from "../amplify/amplify-client-config";
import { getUrl } from "aws-amplify/storage";


interface LevelBrowserProps {
	sendMessage: (gameObjectName: string, methodName: string, parameter?: ReactUnityEventParameter) => void;
}

const LevelBrowser: FC<LevelBrowserProps> = ({ sendMessage }) => {

	// Only fetch levels once
	const hasRun = useRef(false);

	const { levelBrowserActive, setLevelBrowserActive } = useApplicationStore();
	const { levels, setLevels } = useDataStore();


	async function fetchLevels() {
		client.models.AiLevel.observeQuery().subscribe({
			next: async (data) => {
				const levelsWithCovers = await Promise.all(
					data.items
						// Sort in descending order (newest first)
						.sort((a, b) => {
							return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();
						})
						// Map to add cover image URL from S3
						.map(async (level) => {
							if (level.cover) {
								const coverUrl = await getUrl({ path: level.cover });
								return { ...level, coverImage: coverUrl.url.href };
							}
							return level;
						})
				)
				setLevels(levelsWithCovers);
			},
		});
	}

	useEffect(() => {
		// Only fetch levels once
		if (hasRun.current) return;
		hasRun.current = true;

		fetchLevels();
	}, []);

	return (
		<Dialog
			open={levelBrowserActive}
			onOpenChange={setLevelBrowserActive}
			className="max-w-7xl min-h-[calc(100vh_-_10rem)]"
		>
			<div className="relative z-10 h-full outline-none">

				<div className="mb-8 flex items-center">
					<Button variant={"outline"} size={"icon"} className="shrink-0 mr-4" onClick={() => setLevelBrowserActive(false)}>
						<ChevronLeft />
					</Button>
					<h3 className="font-orbitron text-2xl tracking-wider">Level Browser</h3>
					<p className="ml-auto text-sm font-light text-muted-foreground">Play AI levels generated by the community.</p>
				</div>

				<ScrollArea className="h-[calc(100vh_-_18rem)] px-4">
					<div className="grid grid-cols-3 gap-4 w-full">
						{levels && levels.map((level, index) => (
							<LevelCard
								key={index}
								level={level}
								sendMessage={sendMessage}
							/>
						))}
					</div>
				</ScrollArea>

			</div>
		</Dialog>
	)
}

export default LevelBrowser;