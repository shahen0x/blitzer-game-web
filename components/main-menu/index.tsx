/**
 * MAIN MENU
 * The main menu is an overlay that is only displayed when the "ActivateMainMenu" event is sent by the game.
 * Includes: a list of buttons to start different game modes or other features.
 * 
 */

"use client";

import { FC, useCallback, useEffect } from "react";
import Image from "next/image";
import { useApplicationStore } from "@/store/use-application-store";
import { ReactUnityEventParameter } from "react-unity-webgl/distribution/types/react-unity-event-parameters";
import { StarsBackground } from "../background/stars";
import { Meteors } from "../background/meteors";
import MainMenuButton from "./main-menu-btn";
import NavigableMenu, { MenuItem } from "../ui/navigable-menu";

interface MainMenuProps {
	addEventListener: (eventName: string, callback: (...parameters: ReactUnityEventParameter[]) => ReactUnityEventParameter) => void;
	removeEventListener: (eventName: string, callback: (...parameters: ReactUnityEventParameter[]) => ReactUnityEventParameter) => void;
	sendMessage: (gameObjectName: string, methodName: string, parameter?: ReactUnityEventParameter) => void
}


const MainMenu: FC<MainMenuProps> = ({
	addEventListener,
	removeEventListener,
	sendMessage
}) => {


	// Access global states
	const {
		mainMenuActive,
		setMainMenuActive,
		setGameModeActive,
		setIsLevelGeneratorActive,
		setLevelBrowserActive,
		setLeaderboardDialogActive
	} = useApplicationStore();


	// Listens for the "ActivateMainMenu" event and sets the main menu active
	const handleSetMainMain = useCallback(() => {
		setMainMenuActive(true);
		setGameModeActive('none');
	}, []);

	useEffect(() => {
		addEventListener("ActivateMainMenu", handleSetMainMain);
		return () => removeEventListener("ActivateMainMenu", handleSetMainMain);
	}, [addEventListener, removeEventListener, handleSetMainMain]);


	// If the main menu is not active, don't render anything
	if (!mainMenuActive) return null;


	// Menu Items
	const items: MenuItem[] = [
		{
			id: "normal-mode",
			title: "Normal Mode",
			description: "Play 3 levels and beat the final boss.",
			action: () => handleStartNormalMode(),
		},
		{
			id: "ai-levels",
			title: "AI Levels",
			description: "Play a level generated by AWS Bedrock.",
			action: () => setIsLevelGeneratorActive(true),
		},
		{
			id: "level-browser",
			title: "Level Browser",
			description: "Browse levels generated by AWS Bedrock.",
			action: () => setLevelBrowserActive(true),
		},
		{
			id: "leaderboard",
			title: "Leaderboard",
			description: "View top player rankings.",
			action: () => setLeaderboardDialogActive(true),
		},
		{
			id: "boss-fight",
			title: "Boss Fight",
			description: "Fight the boss in the final level.",
			action: () => handleStartBossFightMode(),
		},
	];

	const handleSelect = (item: MenuItem) => {
		if (item.action) {
			item.action();
		}
	};


	// Start game modes
	function handleStartNormalMode() {
		setMainMenuActive(false);
		setGameModeActive('normal');
		sendMessage("MainMenuManager", "StartNormalMode");
	}

	const handleStartBossFightMode = () => {
		setMainMenuActive(false);
		setGameModeActive('bossFight');
		sendMessage("MainMenuManager", "StartBossFight");
	}


	return (
		<div className="fixed top-0 left-0 z-50 w-full h-full flex justify-center items-center bg-[radial-gradient(ellipse_at_top_left,_var(--tw-gradient-stops))] from-[#4F2C7D] via-[#200643] to-[#05001c]">

			<StarsBackground className="absolute z-10" />
			<div className="absolute top-0 right-0 w-full h-full -scale-x-100">
				<Meteors number={20} />
			</div>

			<div className="flex flex-col justify-center items-center">
				<Image src="/logo.png" alt="logo" width={720} height={215} className="w-auto h-auto max-w-xl mb-8 relative z-50" priority />

				<div className="relative z-50 space-y-6">
					<div className="flex flex-col space-y-4">

						<MainMenuButton onClick={handleStartNormalMode} title="Normal Mode" description="Play 3 levels and beat the final boss." />
						<MainMenuButton onClick={() => setIsLevelGeneratorActive(true)} title="AI Levels" description="Play a level generated by AWS Bedrock." />
						<MainMenuButton onClick={() => setLevelBrowserActive(true)} title="Level Browser" description="Play a level generated by AWS Bedrock." />
						<MainMenuButton onClick={() => setLeaderboardDialogActive(true)} title="Leaderboard" description="Play a level generated by AWS Bedrock." />
						<MainMenuButton onClick={handleStartBossFightMode} title="Boss Fight" description="Fight the boss in the final level." />

						{/* <NavigableMenu
							items={items}
							onSelect={handleSelect}
							layout="grid"
							gridCols={2}
							className="w-full max-w-3xl rounded-xl gap-4"
						>
							{({ item, isSelected }) => (
								<div
									className={`py-4 px-6 rounded-2xl transition-all border ring-1 ${isSelected
										? "bg-primary/5 ring-primary"
										: "bg-white/10 ring-white/20"
										}`}
								>
									<h3 className={`font-orbitron text-lg tracking-wide transition-all ${isSelected
										? "text-primary tracking-widest"
										: "text-white"
										}`}>
										{item.title}
									</h3>
									<p className="text-sm text-white/70">{item.description}</p>
								</div>
							)}
						</NavigableMenu> */}


					</div>
				</div>
			</div>
		</div>
	)
}

export default MainMenu;